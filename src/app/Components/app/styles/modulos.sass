//Indicar modulos a utilizar
@use "sass:string"
@use "sass:color"
@use "sass:list"
@use "sass:math"
@use "sass:map"
@use "sass:selector"
@use "sass:meta"
// Importo el main para poder acceder a tres colores primarios
@import "../../main"
//Cambios en base a bem
//Modulos de sass
.module-sass__element
    border: $border $purple-color
    margin: 5% 0
    height: 10vh
    width: 50%

//math, altura random de div
.math
    height: math.random($limit:100)*1vh

//String se unen dos strings y se les quita las "" para que se reconozca el estilo
@mixin fontString($style)
    $font: "Exo ,"
    $f: string.insert($font, $style, 100)
    $font-family: string.unquote($f)
    font-family: $font-family


.string__label1--fantasy
    @include fontString($style: Fantasy)
.string__label2--sansSerif
    @include fontString($style: san-serif)

// Color

.color__p--green
    background-color: $ygreen
.color__p--lightgreen
    background-color: color.adjust($ygreen, $hue:15)

// List, se indica el estilo de la letra al unir en una lista
@mixin font($style)
    $font: "Exo"
    $font-family: list.append($font, $style, $separator:comma)
    font-family: $font-family


.list__label1--fantasy
    @include font($style: Fantasy)
.list__label2--fantasy
    @include font($style: san-serif)

    
// Map, obtiene el valor especifico para cada llave
$color: ("red": $red, "green": $green, "blue": $blue)
.map
    height: auto
.map__p--red
    background-color: map.get($color, "red")  
.map__p--blue
    background-color: map.get($color, "blue")  
.map__p--green
    background-color: map.get($color, "green")  

// Selector, se crea un nuevo selector
$new_selector: selector.nest(".selector", ".selector__p") 

#{$new_selector}
    background-color: pink

// Meta, ver si una variable existe, si existe aplicar efecto

.meta__p
    $rr : meta.variable-exists("test")
    @if $rr
        background-color: $ygreen
    @else 
        background-color: $purple-color


